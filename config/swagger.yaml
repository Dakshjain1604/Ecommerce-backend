openapi: 3.0.0
info:
  title: E-Commerce basic API's
  description: we have basic operations like registering a user and login
  version: 0.1.9
servers:
  - url: http://localhost:8080
    description: LOCAL SERVER 
  # - url: https://2524-157-38-120-27.ngrok-free.app
  #   description: NGROK SERVER 

paths:

  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with the provided name, email, and password.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The user information to register
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User registered successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: User registered successfully
              user:
                $ref: '#/definitions/User'
        '400':
          description: Invalid input data
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid email or password
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal server error
      tags:
        - Auth

# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         name:
#           type: string
#         email:
#           type: string
#         password:
#           type: string

  /auth/login:
    post:
      summary: Login to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth'
              type: object
              properties:
                email:
                  type: string
                  example: moin@gmail.com
                password:
                  type: string
                  example: moin123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"

  /products:
    get:
      summary: Retrieve the list of products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                  $ref: 
                  type: array
                    items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Product Name
                    price:
                      type: number
                      format: float
                      example: 19.99
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  components:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

  /auth/users:
    get:
      summary: Retrieve the list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

components:
  schemas:
    users:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          email:
            type: string
            example: user@example.com
          name:
            type: string
            example: User Name
  /orders/all:
    get:
      summary: Retrieve the list of all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    orders:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          product:
            type: string
            example: "Product Name"
          quantity:
            type: integer
            example: 2
          price:
            type: number
            format: float
            example: 19.99
          status:
            type: string
            example: "Delivered"